services:
  postgres:
    image: postgres
    environment:
      - POSTGRES_PASSWORD=postgrespw
    ports:
      - 5432:5432
    volumes:
      - pgdata:/var/lib/postgresql/data
      # - /var/lib/postgresql/data

  mongodb:
    image: mongo
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=mongopw
    ports:
      - 27017:27017
    volumes:
      - mongodata:/data/db
      # - /var/lib/data/db


  rabbitmq:
    image: rabbitmq:3-management-alpine
    ports:
      - 5672:5672
      - 15672:15672
    # healthcheck:
    #   test: ["CMD", "rabbitmqctl", "status"]
    #   interval: 5s
    #   timeout: 3s
    #   retries: 3
    healthcheck:
      test: ["CMD", "rabbitmqctl", "await_startup"]
      interval: 10s
      retries: 10
      start_period: 30s # BUG: ensures that RabbitMQ is fully ready before any service connects. 
      # the actual message broker may take extra time to fully initialize.

  auction-svc:
    image: PuzzledSunrise/auction-svc:latest
    build: 
      context: .
      dockerfile: src/AuctionService/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - RabbitMq__Host=rabbitmq
      - ConnectionStrings__DefaultConnection=Server=postgres:5432;User Id=postgres;Password=postgrespw;Database=auctions
      - IdentityServiceUrl=http://identity-svc
    ports:
      - 7001:80
    depends_on:
      rabbitmq:
        condition: service_healthy # BUG: wait for rabbitmq be fully ready before running auction-svc


  search-svc:
    image: PuzzledSunrise/search-svc:latest
    build: 
      context: .
      dockerfile: src/SearchService/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - RabbitMq__Host=rabbitmq
      - ConnectionStrings__MongoDbConnection=mongodb://root:mongopw@mongodb
      - AuctionServiceUrl=http://auction-svc
    ports:
      - 7002:80
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongodb:
        condition: service_started
        # condition: service_healthy
      # - rabbitmq
      # - mongodb

  identity-svc:
     image: PuzzledSunrise/identity-svc:latest
     build: 
       context: .
       dockerfile: src/IdentityService/Dockerfile
     environment:
    # Set the ASP.NET Core environment to "Docker"
    # This allows the application to detect that it is running inside a Docker container
    # and apply specific configurations accordingly (e.g., setting IssuerUri in IdentityServer)
       - ASPNETCORE_ENVIRONMENT=Docker
       - ASPNETCORE_URLS=http://+:80
       - ConnectionStrings__DefaultConnection=Server=postgres:5432;User Id=postgres;Password=postgrespw;Database=identity
     ports:
       - 5001:80
     depends_on:
       - postgres

  # Define the gateway-svc service
  gateway-svc:
    # Use the specified pre-built image from the registry (if available)
    image: PuzzledSunrise/gateway-svc:latest
    
    # Build configuration for the service if the image needs to be built locally
    build: 
      # Set the build context to the current directory
      context: .
      # Specify the path to the Dockerfile for the GatewayService
      dockerfile: src/GatewayService/Dockerfile
    
    # Environment variables to configure the application inside the container
    environment:
      # Set the ASP.NET Core environment to "Docker" (could be used for specific configurations)
      - ASPNETCORE_ENVIRONMENT=Docker
      # Configure ASP.NET Core to listen on all network interfaces on port 80 inside the container
      - ASPNETCORE_URLS=http://+:80
    
    # Port mapping from host to container
    ports:
      # Map port 6001 on the host to port 80 in the container
      - 6001:80

volumes:
  pgdata:
  mongodata:
